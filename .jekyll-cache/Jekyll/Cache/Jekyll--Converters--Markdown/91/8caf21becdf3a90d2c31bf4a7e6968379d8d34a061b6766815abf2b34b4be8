I"W(<h1 id="project-euler-">Project Euler <br /><br /></h1>

<h2>Problem 2: Even Fibonacci numbers</h2>
<p>Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:</p>

<p class="cen"> 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ... </p>

<p>By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.</p>

<h3>Soution:</h3>

<p>First off, I created a cached function in order to store all the calculated values, then I run a while loop to sum the values.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fib_cache</span> <span class="o">=</span> <span class="p">{}</span>

<span class="k">def</span> <span class="nf">fib</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">fib_cache</span><span class="p">:</span> <span class="k">return</span> <span class="n">fib_cache</span><span class="p">[</span><span class="n">n</span><span class="p">]</span>
    <span class="n">fib_cache</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="n">n</span> <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">3</span> <span class="k">else</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">fib_cache</span><span class="p">[</span><span class="n">n</span><span class="p">]</span>

<span class="n">i</span> <span class="o">=</span> <span class="mi">1</span>
<span class="nb">sum</span> <span class="o">=</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">while</span> <span class="n">res</span> <span class="o">&lt;=</span> <span class="mi">4_000_000</span><span class="p">:</span>
    <span class="n">res</span> <span class="o">=</span> <span class="n">fib</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">res</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span> <span class="nb">sum</span> <span class="o">+=</span> <span class="n">res</span>
    <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>

<span class="k">print</span><span class="p">(</span><span class="nb">sum</span><span class="p">)</span> <span class="c1"># 4613732
</span></code></pre></div></div>

<p>Another simpler approach is using python swap constructor:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">res</span> <span class="o">=</span> <span class="mi">0</span> 
<span class="n">a</span> <span class="o">=</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">1</span>

<span class="k">while</span> <span class="n">b</span> <span class="o">&lt;=</span> <span class="mi">4_000_000</span><span class="p">:</span>
    <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">b</span><span class="p">,</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
    <span class="k">if</span> <span class="n">b</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span> <span class="n">res</span> <span class="o">+=</span> <span class="n">b</span>

<span class="k">print</span><span class="p">(</span><span class="n">res</span><span class="p">)</span> <span class="c1"># 4613732
</span></code></pre></div></div>

<!-- -------------------------------------------- -->
<p><br /></p>
<h2>Problem 4: Largest palindrome product&lt;/h3&gt;

A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.

Find the largest palindrome made from the product of two 3-digit numbers.

<h3>Soution:</h3>

```python
def maxPalindrome():
    max = 0
    for i in range(1, 1000):
        for j in range(1, 1000):
            res = i * j
            if str(res) == str(res)[::-1] and res &gt; max: max = res
    return max

print(maxPalindrome())
```

<!-- -------------------------------------------- -->
<br />
<h3>Problem 5: Smallest multiple</h3>
2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

<h3>Soution:</h3>

```python
def divisible(num):
    divisible = False
    n = num
    while divisible == False:
        for divisor in range(1, num + 1):
            if n % divisor != 0:
                n += 1
                break
            if divisor == num:
                divisible = True
                return n

print(divisible(20)) #232792560
```

<!-- -------------------------------------------- -->
<br />
<h3>Problem 9: Special Pythagorean triplet</h3>

A Pythagorean triplet is a set of three natural numbers, a &lt; b &lt; c, for which:

<p class="cen"> a^2 + b^2 = c^2 </p>

For example, 32 + 42 = 9 + 16 = 25 = 52.

There exists exactly one Pythagorean triplet for which a + b + c = 1000.
Find the product abc.


<h3>Soution:</h3>

```python
def triplet(limit):
    for a in range(1,limit + 1):
        for b in range(1, limit + 1 - a):
            c = 1000 - a - b
            if a*a + b*b == c*c:
                return a*b*c
    
print(triplet(1000)) #31875000
```

<!-- -------------------------------------------- -->
<br />
<h3>Problem 8: Largest product in a series</h3>

The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

<p class="cen" style="font-family: consolas">
73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450
</p>

Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?

<h3>Soution:</h3>

```python
from functools import reduce

# used regex on sublime to set string in one line
num = str(7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450)

chunk = 13

# create a list of all possible 13 digits long chunks
nums = [num[i: i + chunk] for i in range(0, len(num) - chunk + 1, 1)]

# create a list "factor", with lists containing one element per digit
factors = [[int(n) for n in num] for num in nums]

# apply the product of each factor within the lists, separately
products = [reduce(lambda x, y: x*y, factor) for factor in factors]

# max product found
print(max(products)) # 23514624000
```

<!-- -------------------------------------------- -->
<br />
<h3>Problem 10: Summation of primes</h3>

The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.

Find the sum of all the primes below two million.

<h3>Soution:</h3>

```python
import math as mth

def isPrime(num):
    if num == 1: return False
    if num == 2: return True
    if not num &amp; 1: return False
    limit = int(mth.sqrt(num)) + 1
    for div in range(3, limit, 2):
        if num % div == 0: return False
    return True

sum = 0

for num in range(2, 2_000_000):
    if isPrime(num): sum += num

print(sum) # 142913828922
```

<!-- -------------------------------------------- 
<br>
<h3>Problem X:</h3>

<p class="cen"> This is centered </p>

<h3>Soution:</h3>

```python

```

<!-- -------------------------------------------- 
<br>
<h3>Problem X:</h3>

<p class="cen"> This is centered </p>

<h3>Soution:</h3>

```python

```

<!-- -------------------------------------------- 
<br>
<h3>Problem X:</h3>

<p class="cen"> This is centered </p>

<h3>Soution:</h3>

```python

```

<!-- -------------------------------------------- 
<br>
<h3>Problem X:</h3>

<p class="cen"> This is centered </p>

<h3>Soution:</h3>

```python

```

<!-- -------------------------------------------- -->
</h2>
:ET