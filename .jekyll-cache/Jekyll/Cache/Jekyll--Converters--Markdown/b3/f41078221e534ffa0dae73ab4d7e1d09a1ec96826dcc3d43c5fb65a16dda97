I"L<h1 id="codility">Codility</h1>

<p>Codility is a popular automated test site of programming skills. By taking its tests you will demonstrate your programming ability on some small coding assignments. Presented with a few tasks, you will require to write or correct some code.
Here I want to show some lessons you can find on Codility and their solutions, in Python.</p>

<p><br /><br /></p>

<h1 id="lessons">Lessons:</h1>
<p><br /></p>

<h2>Binary Gap</h2>

<p>A binary gap within a positive integer N is any maximal sequence of consecutive zeros that is surrounded by ones at both ends in the binary representation of N.</p>

<p>For example, number 9 has binary representation 1001 and contains a binary gap of length 2. The number 529 has binary representation 1000010001 and contains two binary gaps: one of length 4 and one of length 3. The number 20 has binary representation 10100 and contains one binary gap of length 1. The number 15 has binary representation 1111 and has no binary gaps. The number 32 has binary representation 100000 and has no binary gaps.</p>

<p>Write a function:</p>

<p class="cen">def solution(N)


that, given a positive integer N, returns the length of its longest binary gap. The function should return 0 if N doesn't contain a binary gap.

For example, given N = 1041 the function should return 5, because N has binary representation 10000010001 and so its longest binary gap is of length 5. Given N = 32 the function should return 0, because N has binary representation '100000' and thus no binary gaps.

Write an efficient algorithm for the following assumptions:

<p class="cen"> N is an integer within the range [1..2,147,483,647]. </p>

<h2>Soution:</h2>

So the next function may look short but it applies some important concepts about regular expressions: lookahead and lookbehind, collectively called “lookaround”.
<br /><br />
Lookarounds actually match characters, but then give up the match, returning only the result: match or no match. in other words, they don't "use" the matched character, allowing it to use it again in the next check.
<br /><br />
This is specially usefull for this lesson since allow us to match zeroes in between ones without "using" those ones. E.g: for 10001001 we have two matches, 000 and 00, and for this we have to use the 1 in the middle twice. We get this by applying the lookbehind expression: (?&lt;=X), being X the match we want, in this case 1.


```python
import re

def solution(N):
    zeros = re.findall(r'(?&lt;=1)0+(?=1)', bin(N)[2:])
    return len(max(zeros)) if zeros else 0
```

<br />
<h2>Problem X:</h2>

<p class="cen"> This is centered </p>

<h2>Soution:</h2>

```python

```

<br />
<h2>Problem X:</h2>

<p class="cen"> This is centered </p>

<h2>Soution:</h2>

```python

```


<br />
<h2>Problem X:</h2>

<p class="cen"> This is centered </p>

<h2>Soution:</h2>

```python

```

</p>
:ET